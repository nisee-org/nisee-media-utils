name: build-and-deploy
on:
  workflow_dispatch:
  workflow_call:
  push:
    paths:
      - "src/**"
      - "Dockerfile"
      - "pnpm-lock.yaml"
      - "prisma/schema.prisma"
      - ".github/workflows/build-and-deploy.yml"
    branches:
      - "main"

env:
  ECR_REPOSITORY: "nisee/services"

jobs:
  build:
    runs-on: "ubuntu-20.04"
    timeout-minutes: 12
    steps:
      - run: echo "ðŸŽ‰ The job was automatically triggered by a ${{ github.event_name }} event."

      - uses: actions/checkout@v4
        with:
          fetch-depth: 10
          persist-credentials: false

      - name: Setup Git
        run: |
          GIT_BRANCH=${{ github.ref }}
          echo "REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')" >> $GITHUB_ENV
          echo "GIT_BRANCH=$(echo "${GIT_BRANCH/refs\/heads\//}")" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git log -n 1 --pretty='format:%cd' --date=format:'%y-%m-%d')" >> $GITHUB_ENV
          echo "COMMIT_TIME=$(git log -n 1 --pretty='format:%cd' --date=format:'%H-%M-%S')" >> $GITHUB_ENV
          echo "CURRENT_DATETIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "GH_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=${{ env.GIT_BRANCH }}-${{ env.COMMIT_DATE }}-${{ env.COMMIT_TIME }}-${{ env.GH_SHA_SHORT }}

      - name: Build and push
        id: build-image
        uses: docker/build-push-action@v4
        timeout-minutes: 15
        with:
          context: .
          network: host
          build-args: |
            GH_PAT=${{ secrets.GH_PAT }}
            BUILD_NR=${{ env.GIT_BRANCH }}-${{ env.GH_SHA_SHORT }}
            BUILD_BRANCH=${{ env.GIT_BRANCH }}
            BUILD_COMMIT=${{ env.GH_SHA_SHORT }}
            COMMIT_DATE=${{ env.COMMIT_DATE }}
            BUILD_DATE=${{ env.CURRENT_DATETIME }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Job Summary
        run: |
          echo "SDK Tag: $GIT_BRANCH-$COMMIT_DATE-$COMMIT_TIME-$GH_SHA_SHORT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: $GIT_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "- Commit Date: $COMMIT_DATE" >> $GITHUB_STEP_SUMMARY
          echo "- Commit Time: $COMMIT_TIME" >> $GITHUB_STEP_SUMMARY
          echo "- Commit SHA: $GH_SHA_SHORT" >> $GITHUB_STEP_SUMMARY
  deploy:
    needs: build
    runs-on: "ubuntu-20.04"
    timeout-minutes: 12
    if: github.ref == format('refs/heads/{0}', 'main')
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"

      - name: Deploy to ECS
        uses: imehedi/actions-awscli-v2@latest
        if: github.ref == format('refs/heads/{0}', 'main')
        with:
          args: ecs update-service --cluster NiseeCluster --service webhook_cdn --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-2"
